# Nome do seu workflow, que aparecerá na aba "Actions" do GitHub.
name: Criar Release e Compilar Projeto

# Gatilho: Este workflow roda sempre que uma nova tag começando com 'v' (ex: v1.0, v2.3.4) for enviada.
on:
  push:
    tags:
      - 'v*'

jobs:
  # Nome do nosso job principal.
  build-and-release:
    # Nome que aparecerá na interface do GitHub.
    name: Compilar e Lançar

    # Estratégia de Matriz: Roda o mesmo job em diferentes sistemas operacionais.
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # Define a máquina virtual a ser usada, baseada na matriz acima.
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Baixa o código do seu repositório para a máquina virtual.
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configura o ambiente Python.
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Use a versão do Python do seu projeto.

      # 3. Instala as dependências do projeto.
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 4. Compila o executável com PyInstaller.
      #    O comando usa "if" para lidar com a sintaxe diferente do '--add-data' entre Windows e outros OS.
      - name: Compilar com PyInstaller (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          pyinstaller --onefile --windowed --name="psy-r" \
          --add-data="src/app/assets:app/assets" \
          src/main.py

      - name: Compilar com PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile --windowed --name="psy-r" `
          --add-data="src/app/assets;app/assets" `
          src/main.py

      # 5. Organiza os arquivos para a Release.
      #    Define nomes diferentes para os artefatos de cada OS.
      - name: Preparar artefato (Linux)
        if: runner.os == 'Linux'
        run: |
          mv dist/psy-r psyR-linux
          echo "ASSET_PATH=psyR-linux" >> $GITHUB_ENV

      - name: Preparar artefato (macOS)
        if: runner.os == 'macOS'
        run: |
          mv dist/psy-r psyR-macos
          echo "ASSET_PATH=psyR-macos" >> $GITHUB_ENV

      - name: Preparar artefato (Windows)
        if: runner.os == 'Windows'
        run: |
          mv dist/psy-r.exe psyR-windows.exe
          echo "ASSET_PATH=psyR-windows.exe" >> $GITHUB_ENV

      # 6. Cria a Release no GitHub e anexa o executável compilado.
      - name: Criar Release e Anexar Artefato
        uses: softprops/action-gh-release@v2
        with:
          # O nome da Release será o nome da tag (ex: "v1.0.0").
          name: Release ${{ github.ref_name }}
          # Anexa o arquivo cujo caminho foi definido no passo anterior.
          files: ${{ env.ASSET_PATH }}
        env:
          # O token é necessário para dar permissão à Action de criar uma release.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}